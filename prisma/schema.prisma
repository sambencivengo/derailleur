// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

model User {
  id String @id @unique
  hashedPassword String @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  username String @unique @db.VarChar(30)
  email String? @unique
  location String?
  favoriteBikes String[]
  posts Post[]
  comments Comment[]
  sessions Session[]
  saved UserSavedPosts[]
  likedPosts UserLikedPosts[]
  likedComments UserLikedComments[]
  oAuthAccounts OAuthAccount[]
}

model OAuthAccount {
  id String @id @unique
  providerId String
  providerUserId String
  userId String
  user User @relation(references: [id], fields: [userId])
}

model Session {
  id String @id @unique
  userId String
  expiresAt DateTime
  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
  @@index([userId])
}

model Post {
  id String @id @unique
  title String
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  published Boolean @default(false)
  author User @relation(references: [id], fields: [authorId])
  authorId String
  rideWithGPSLink String?
  tags Tag[]
  images String[]
  thumbnail String?
  comments Comment[]
  category PostCategory @default(POST)
  savedBy UserSavedPosts[]
  likes UserLikedPosts[]
  @@unique([id, createdAt])
}

model UserLikedPosts {
  id String @id @unique
  createdAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String
}
model UserLikedComments {
  id String @id @unique
  createdAt DateTime @default(now())
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  user User @relation(fields: [userId], references: [id])
  userId String
}

model UserSavedPosts {
  id String @id @unique
  createdAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user User @relation(fields: [userId], references: [id])
  userId String
}

model Comment {
  id String @id @unique
  content String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  author User @relation(references: [id], fields: [authorId], onDelete: Cascade)
  authorId String
  post Post @relation(references: [id], fields: [postId], onDelete: Cascade)
  postId String
  parentComment Comment? @relation("ParentComments", fields: [parentCommentId], references: [id])
  parentCommentId String?
  replies Comment[] @relation("ParentComments")
  likes UserLikedComments[]
  @@unique([id, createdAt])
}

model Tag {
  id String @id @unique @default(uuid())
  name String @unique
  posts Post[]
}

enum PostCategory {
  POST
  ROUTE
  TRIP
	@@map("Post_Category")
}